import logging
from server import Server
from user import User

# Set up logging to file
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),  # Log to a file
        logging.StreamHandler()            # Also output to console (optional)
    ]
)

def main():
    # Initialize the server
    server = Server()

    while True:
        print("\n1. Register")
        print("2. Login")
        print("3. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            # Registration
            username = input("Enter username for registration: ")
            password = input("Enter password for registration: ")
            logging.debug(f"Registration process initiated for username: {username}")

            if server.is_username_taken(username):
                print(f"Username '{username}' is already taken. Please choose a different username.")
                logging.error(f"Registration failed: Username '{username}' is already taken.")
            else:
                user = User(username, password, is_registration=True)
                if server.register_user(username, user.hashed_password, user.get_public_key()):
                    print(f"User '{username}' has been registered successfully.")
                else:
                    print(f"Registration failed for username '{username}'.")

        elif choice == "2":
            # Login process
            username = input("Enter your username: ")
            password = input("Enter your password: ")
            logging.debug(f"Login process initiated for username: {username}")

            if username in server.users_db:
                logging.info(f"User '{username}' found in database.")
                user = User(username, password, is_registration=False)
                challenge = server.generate_challenge()
                server.set_challenge(challenge)
                logging.debug(f"Challenge generated by server: {challenge}")

                user_public_key_n = server.users_db[username]['public_key']
                enc_challenge = server.encrypt_challenge(challenge, user_public_key_n)
                logging.debug(f"Challenge encrypted using user public key.")

                decrypted_challenge = user.decrypt_challenge(enc_challenge)
                logging.debug(f"Challenge decrypted by user: {decrypted_challenge}")

                enc_response = user.encrypt_challenge(decrypted_challenge, server.public_key)
                logging.debug(f"Response encrypted by user with server's public key.")

                is_authenticated = server.validate_response(username, enc_response)

                if is_authenticated:
                    print(f"Login successful for user '{username}'.")
                    logging.info(f"User '{username}' logged in successfully.")
                else:
                    print(f"Login failed for user '{username}'. Incorrect password or challenge response.")
                    logging.error(f"Login failed for user '{username}'. Incorrect password or challenge response.")
            else:
                print(f"User '{username}' not found. Please register first.")
                logging.error(f"User '{username}' not found in database.")

        elif choice == "3":
            logging.info("Exiting program.")
            break

        else:
            logging.warning("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
